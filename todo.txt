// todo:
- BUG: the connection between a biquadfilter and a gain node doesn't seem to get reflected in the exported json. i.e. for the 
biquadfilter you get an empty "feedsInto" list when it should have the gain node. try osc -> biquad -> gain.

- instead of adding the oscillator reference to the nodeStore, just add a dict of props. actually, do that for all nodes.

- use the release param for ADSR on mouseup to determine when the note should be silenced.
- when storing the nodes, keep track of the desired gain value (and other params) - don't just set the gain node's gain value to
  the desired one. this is because when the ADSR envelope is active for a variable amount of time, the gain value will remain
  at whereever it was on mouseup. it could be < than the desired gain value on the next mousedown as a result. so anyway,
  the baseParamValue should always be the desired value, not reading off the existing value of the node.

- show the ADSR curve
- better keyboard + mini piano roll maybe?
- color-coding for ADSR envelopes depending on target property (i.e. if targeting gain, the connector could be blue. if targeting
  frequency, the connector could be green?)
- be able to close parameter box after clicking on a node


// other random notes:
ADSREnvelope {attack: 0.54, sustain: 0, decay: 0.53, release: 0, sustainLevel: 0, …

- when refactoring, keep these things in mind?:
	- split up the files. i.e. ADSREnvelope class should get its own file. you'll need that applyADSR code in the piano roll app too, unless you can actually define functions in json?
	- the UI modification code (i.e. drawing the svg lines, node elements) maybe could be its own class? something like UIModifier or UIEditor.
	
- there should be a distinction between connecting nodes and connecting to audio params. use a dotted line for params? also,
  arrows for the lines would be helpful.

- an actual keyboard image for note playback would be nice.